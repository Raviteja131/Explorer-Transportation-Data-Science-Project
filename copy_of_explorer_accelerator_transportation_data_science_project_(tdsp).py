# -*- coding: utf-8 -*-
"""Copy of EXPLORER / ACCELERATOR - Transportation Data Science Project (TDSP).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14V39o4z-ftukXAaVGDTDRriiGHlbITJn

# ðŸš— **Welcome to the <font color='crimson'>** **Explorer Transportation Data Science Project! ðŸš—**</font>
 Hosted by the [Northeast Big Data Innovation Hub](https://nebigdatahub.org/about) & [National Student Data Corps](https://nebigdatahub.org/nsdc), in collaboration with the [U.S. Department of Transportation Federal Highway Administration](https://highways.dot.gov/).


---

## <font color='crimson'>**Project Information and Background:**</font>

**Project Description:**

By participating in this project, you are joining a
community of transportation data science learners interested in making roads safer for vulnerable road users.

The Explorer TDSP has six Milestones, including guided transportation research into a community of interest. Each Milestone can take 1-5 hours, or less, depending on your level of experience.

To learn more about this project, including key highlights, incentives, and important links, [review the TDSP Webpage here](https://nebigdatahub.org/nsdc/tdsp/)!

## <font color='crimson'>**How to Get Started:**</font>

In order to work within this Google Colab Notebook, **please start by clicking on "File" in the top left corner of your notebook, and then "Save a copy in Drive."  "Explorer TDSP - Raviteja Moningi ."** This will save a copy of the notebook in your personal Google Drive.

You may now begin!

## <font color='crimson'>**A Quick Introduction to Google Colab**</font>

Read below for a Google Colab QuickStart:
- Google Colab is a Python Notebook environment built by Google that's free for all.
- Colab Notebooks are made up of cells; cells can be either *text* or *code* cells. You can click the +code or +text button at the top of the Notebook to create a new cell.
- Text cells use a format called [Markdown](https://www.markdownguide.org/getting-started/). Knowledge of Markdown is not required for this project. However, if you'd like to learn more, [check out this Cheatsheet!](https://www.markdownguide.org/cheat-sheet/)
- Python code is executed in *code* cells. When you want to run your code, hover your cursor over the square brackets in the top left corner of your code cell. You'll notice a play button pop up! (â–¶) Click the play button to run the code in that cell. Code cells run one at a time.
- The memory shared across your notebook is called the *Runtime*. You can think of a Runtime as a "code session" where everything you create and execute is temporarily stored.
- Runtimes will persist for a short period of time, so you are safe if you need to refresh the page, but Google will shutdown a Runtime after enough time has passed. Everything that you have printed out will remain within your Notebook even if the runtime is disconnected.

If this is your first time using Google Colab, we highly recommend reviewing the [NSDC's *Using Google Colab Guide*](https://nebigdatahub.org/wp-content/uploads/2023/04/NSDC-Data-Science-Projects-Introduction-Using-Google-Colab.pdf) before continuing. For a more comprehensive guide, see [Colab's *Welcome To Colaboratory* walkthrough.](https://colab.research.google.com/github/prites18/NoteNote/blob/master/Welcome_To_Colaboratory.ipynb)

## <font color='crimson'>**An Introduction to Python Programming**</font>

Python is a programming language often used to analyze data.

Python is open-source, which means it's free to use and distribute, even for commercial purposes. Python's versatility allows it to be used for web development, data visualization, artificial intelligence, scientific computing, and more.

Python's extensive standard library, along with its powerful third-party packages, enable developers and data scientists to perform a vast array of tasks.

For those looking to dive deeper into Python, here are some valuable resources:
- [The Official Python Documentation](https://docs.python.org/3/) â€“ Offers comprehensive guides and reference materials for Python leaners.
- [Real Python](https://realpython.com/) â€“ Provides tutorials and articles for Python developers of all skill levels.
- [PyCon](https://pycon.org/) â€“ The largest annual gathering for the Python community, which is useful for learning from experts and discovering the latest developments in the Python ecosystem.
- [Python for Everybody](https://www.py4e.com/) â€“ A book and website by Dr. Charles Severance that offers a free course on Python for beginners.

**Let's review some essential Python Functions!**

Here are some key functions you'll frequently encounter:

1. **`head()`**: This function is crucial for getting a quick overview of your dataset. By default, it returns the first five rows, offering a snapshot of your data's structure and values.

2. **`describe()`**: This provides a summary of the statistical characteristics of your dataset. It's particularly useful for gaining insights into the distribution, mean, standard deviation, and range of numerical columns.

3. **`sum()`**: This calculates the total sum of a column or a series of numbers, proving essential for quick calculations and aggregations in data analysis.

4. **`isnull()`**: This helps identify missing or null values in your dataset, allowing for effective data cleaning and preprocessing.

5. **`value_counts()`**: Understanding the frequency of various values in your dataset is a common task in data science. The `value_counts()` function makes this easy by counting the occurrence of each unique value in a column.

Now that you've reviewed these important concepts, let's dive in to the project!

## <font color='crimson'>**Milestone #1 - Data Preparation**</font>
GOAL: The main goal of this milestone is to set up your environment, install the required packages, learn how to access data and do some basic exploratory data analysis.

**Step 1:** Setting up libraries and installing packages

A **library** is a collection of code that you can use in your programs, while a **package** is a folder that contains libraries or other packages, organized for easy use.

To install a library, we'll use the following format:
```python
 import <library name> as <shortname>
```
We use a *short name* since it is easier to refer to the package to access functions and also to refer to subpackages within the library. Think of it as a nickname for easier reference!
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium

"""These are the libraries that will help us throughout this project. We invite you to research each library for a better understanding.

We encourage you to read more about the important and most commonly used libraries like Pandas, Matplotlib, and Seaborn and write a few lines in your own words about what they do. [You may use the Data Science Resource Repository (DSRR) to find resources to get started!](https://nebigdatahub.org/nsdc/data-science-resource-repository/)

**TO DO:** Write a few lines about what each library does:




> * Pandas:Pandas is a Python library for data manipulation and analysis, offering data structures like DataFrames and Series. It simplifies tasks like filtering, grouping, and merging data for analysis.

> * Matplotlib:Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python. It supports a wide range of charts and provides precise control over visual elements.

> * Seaborn:Seaborn is a Python library for creating statistical visualizations, built on top of Matplotlib. It simplifies complex plotting tasks and enhances visual appeal with minimal effort.

**Step 2:** Letâ€™s access our data. We will be using the [NYC OpenData Motor Vehicle Collisions - Crashes dataset](https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Crashes/h9gi-nx95). According to NYC Open Data, "each row represents a crash event. The Motor Vehicle Collisions data tables contain information from all police reported motor vehicle collisions in NYC." If you need a reminder on how to upload your dataset, [please review helpful hints here.](https://nebigdatahub.org/wp-content/uploads/2023/04/NSDC-Data-Science-Projects-Introduction-Using-Google-Colab.pdf)

Since this is a large dataset, we highly recommend that you upload your data by [mounting your Google Drive](https://colab.research.google.com/notebooks/io.ipynb#scrollTo=u22w3BFiOveA).

To mount your Google Drive, begin by finding the folder icon on the left side of your screen. When you click on this folder icon, you will open the Files window. Click on the icon at the top of the Files window that says "Mount Drive" as you hover over it.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Next, we will read the data using the `pd.read_csv` function.
Ensure that you've downloaded the dataset from NYC OpenData, and uploaded the dataset to your Google Drive.

Hint: Your data's file path describes the location of where your data lives. To locate your data's file path, click on the folder/file-shaped icon on the left side of the Notebook. You'll notice a folder labeled "drive." Search for your Motor Vehicle Collisions Dataset within that folder. Right click on your Dataset to "copy path." Paste that path below.
"""

# TODO: Read the data using pandas read_csv function
data = pd.read_csv("/content/Motor_Vehicle_Collisions_-_Crashes_20250109.csv")

"""**Step 3:** Let's see what the data looks like. We can use the `head` function which returns the first 5 rows of the dataset."""

# TODO: Print the first 5 rows of the data using head function of pandasgvsu careers
print(data[:5])

# TODO: Describe the data using the describe function of pandas
desc_stats = data.describe()
print(desc_stats)

"""The information above is currently formatted in scientific notation. Need a refresher? [Review how to analyze and convert to and from scientific notation here!](https://www.mathsisfun.com/numbers/scientific-notation.html)

1. Latitude & Longitude: The latitude and longitude indicate where the crashes are occurring. However, there are some data points with latitude and longitude values of 0, which is likely due to missing or inaccurate data.

2. Number of Persons Injured: On average, each crash has around 0.305 injuries. The maximum number of injuries in a single crash is 43.

3. Number of Persons Killed: Fatalities are rare, with an average of 0.00146 deaths per crash. The maximum number of deaths in one crash is 8.

4. Number of Pedestrians, Cyclists, and Motorists Injured/Killed: These columns provide a breakdown of the injuries and fatalities by type of individual involved.

5. Collision ID: This is a unique identifier for each crash.

---

##<font color='crimson'> **Milestone #2 - Data Ethics, Pre-Processing, and Exploration** </font>
GOAL: The main goal of this milestone is to assess the dataset, find missing values, and decide what to do with those missing data points.

**Step 1:**
Before we begin assessing our data for missing values, it is important that we understand the ethical implications surrounding data processing. To best prepare yourself for this module, review one or more of the following resources:
- [Data Science Ethics Flashcard Video Series](https://youtube.com/playlist?list=PLNs9ZO9jGtUB7XTjXy-ttoo2QSLld9SrV&feature=shared)
- [What Do I Need to Understand about Data Ethics?](https://www.youtube.com/watch?v=Efy8htCDueE)
-[Introduction to Data Cleaning](https://www.youtube.com/watch?v=t8WkoGLkdTk)

**TO DO:** Based on the resources above and outside knowledge, what are some potential bias issues related to the availability of data from well-resourced communities as compared to under-resourced communities? How might bias show up in our dataset?

> Answer here: When data comes mostly from well-off communities with better access to technology, it can create an imbalance, leaving under-resourced communities underrepresented. This means the insights and decisions made might not reflect everyone's reality, potentially reinforcing existing inequalities. Itâ€™s like hearing only part of the story and missing key voices.

**Step 2:**
Check the dataset for missing values.
"""

# TODO: Leverage the isnull() and sum() functions to find the number of missing values in each column
missing_values = data.isnull().sum()

# TODO: Turn the missing value counts into percentages
missing_values_percentage = (missing_values / len(data)) * 100

# TODO: Return counts and percentages of missing values in each column
missing_data = pd.DataFrame({
    'Missing Values': missing_values,
    'Percentage (%)': missing_values_percentage
})

# Sort the results by percentage of missing values in descending order
missing_data_sorted = missing_data.sort_values(by='Percentage (%)', ascending=False)

# Display the sorted missing data summary
print(missing_data_sorted)

"""Here's an overview of the missing values in the dataset:

Columns like VEHICLE TYPE CODE 5, CONTRIBUTING FACTOR VEHICLE 5, VEHICLE TYPE CODE 4, and so on have a high percentage of missing values. This is expected since not all crashes involve multiple vehicles or factors.

OFF STREET NAME and CROSS STREET NAME have significant missing values. This could be due to crashes occurring in locations where these details aren't applicable or weren't recorded.

ZIP CODE, BOROUGH, and ON STREET NAME also have missing values. This might be due to incomplete data entry or crashes occurring in areas where these specifics aren't easily determinable.

LOCATION, LATITUDE, and LONGITUDE have the same count of missing values, indicating that when one is missing, the others are likely missing as well.

**Step 3:** Create a bar chart to display the top 10 contributing factors (e.g. backing up unsafely, unsafe lane changing, etc.) to crashes within the dataset.
"""

#TODO: Plot a Bar Chart
top_factors = data['CONTRIBUTING FACTOR VEHICLE 1'].value_counts().head(10)

# Plot the data
plt.figure(figsize=(8,5))
sns.barplot(x=top_factors.index, y=top_factors.values, palette="magma")
plt.title('Top 10 Contributing Factors to Crashes', fontsize=16)
plt.xlabel('Contributing Factors', fontsize=14)
plt.ylabel('Number of crashes', fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**TO DO:** Besides for "Unspecified," what are the top 3 contributing factors that cause the most crashes?

> *  Driver Inattention/Distraction
> *  Failure to Yield Right-of-Way
> *  Following Too Closely

**TO DO:** What recommendations would you make to new and current drivers after assessing the above data?

>* Based on the data, here are some simple tips for drivers:

Stay focused: Avoid distractions like your phone or anything else that takes your attention off the road.

Be patient: Always yield the right-of-way when required to prevent unnecessary risks.

Keep a safe distance: Donâ€™t follow other vehicles too closelyâ€”give yourself enough time to react.

These small habits can make a big difference in keeping everyone safe!

**Step 4:** Now, let's create another bar chart to determine which vehicle types were involved in the most crashes.
"""

# Determine the top vehicle types involved in crashes
top_vehicle_types = data['VEHICLE TYPE CODE 1'].value_counts().head(10)

# Plotting the top vehicle types
plt.figure(figsize=(12, 7))
sns.barplot(x=top_vehicle_types.index, y=top_vehicle_types.values, palette="cividis")
plt.title('Top 10 Vehicle Types Involved in crashes', fontsize=16)
plt.xlabel('Vehicle Type', fontsize=14)
plt.ylabel('Number of crashes', fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**TO DO:** What are the top 3 vehicles that were most involved in crashes?


> *   Sedaan
> *   Station Wagon/Sport Utility Vehicle
> *   Passenger Vehicle

**TO DO:** Why do you think that "Sedan[s]," "Station Wagon[s]," and "Passenger Vehicle[s]" are involved in a larger number of crashes, injuries, and deaths when compared to the rest of the vehicles? (Think outside the box!)


> *
The high involvement of sedans, station wagons, and passenger vehicles in crashes likely stems from their sheer prevalenceâ€”theyâ€™re the "everyday workhorses" of transportation, constantly on the road. Their frequent use in congested urban areas, combined with a mix of experienced and novice drivers behind the wheel, increases their exposure to accidents. Think of them as the "default" vehicles, naturally at higher risk because they're simply everywhere, doing everything, all the time

**TO DO:** Review the x-axis of the bar chart you created above. </br>
1) What do you notice? </br>
2) What would you recommend we do to improve the bar chart, based on the x-axis (horizontal axis) and why? </br>
3) What recommendation would you make to those who are collecting and/or inputting data into this dataset?

* The x-axis labels are cluttered and angled, making it hard to quickly read and interpret the vehicle types. Some labels also appear inconsistent (e.g., "Station Wagon/Sport Utility Vehicle" and "SPORT UTILITY / STATION WAGON").

*  2) Simplify and standardize the labels (e.g., "SUV/Station Wagon" instead of longer labels).
Rotate the labels slightly (e.g., 30Â° instead of 45Â°) or place them horizontally if space permits.
Use shorter, consistent naming conventions for clarity.


*  3) Standardize vehicle type classifications in the dataset to avoid redundant or inconsistent categories (e.g., combining similar terms like "Station Wagon/Sport Utility Vehicle" and "SPORT UTILITY / STATION WAGON").
Provide clear guidelines for data entry to minimize inconsistencies and ensure uniformity in recorded values.

**Step 5:**  A DataFrame is a two-dimensional and potentially heterogeneous tabular data structure with labeled axes (rows and columns). DataFrames allow for storing, manipulating, and retrieving data in a structured form, serving as the primary data structure for a multitude of data processing tasks. It is used with Python libraries like pandas.

Let's graph the *types* of crashes within this dataset and their frequencies. Begin by aggregating your data, convert to [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html) for simple plotting, and plot.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Aggregating data - Complete for Cyclist and Motorist
types_of_crashes = {
    'Pedestrian Injuries': data['NUMBER OF PEDESTRIANS INJURED'].sum(),
    'Cyclist Injuries': data['NUMBER OF CYCLIST INJURED'].sum(),
    'Motorist Injuries': data['NUMBER OF MOTORIST INJURED'].sum(),
    'Pedestrian Deaths': data['NUMBER OF PEDESTRIANS KILLED'].sum(),
    'Cyclist Deaths': data['NUMBER OF CYCLIST KILLED'].sum(),
    'Motorist Deaths': data['NUMBER OF MOTORIST KILLED'].sum()
}

# Converting to DataFrame for easier plotting - we want the items in the dictionary, use the items function
crash_types_df = pd.DataFrame(list(types_of_crashes.items()), columns=['crash Type', 'Count'])

# Plot
plt.figure(figsize=(12, 7))
sns.barplot(x='Count', y='crash Type', data=crash_types_df, palette="mako")
plt.title('Types of crashes and Their Frequencies')
plt.xlabel('Count')
plt.ylabel('Type of crash')
plt.tight_layout()
plt.show()

"""**TO DO:** Analyze the chart above. What is a recommendation you might make to the Department of Transportation based on this data?

*  Based on the chart, it's clear that motorist injuries dominate, with pedestrian and cyclist injuries being significant as well. Here's what the Department of Transportation could do:

* Prioritize Driver Safety: Invest in advanced safety systems, better road design, and stricter enforcement of traffic rules to prevent motorist injuries.
Enhance Protection for Walkers and Cyclists: Build more dedicated bike lanes, pedestrian-only zones, and safer crossings to reduce risks for vulnerable road users.

* Spread Awareness: Start campaigns on road-sharing etiquette, emphasizing mutual respect among drivers, cyclists, and pedestrians.

---

##<font color='crimson'> **Milestone #3 - Time Series Analysis**</font>
GOAL: The main goal of this milestone is to dive deeper into Time Series Analysis in order to better understand our data's trends over time.

**Step 1:**

Before we jump into Time Series Analysis (TSA), it's important to understand the basics, including Trends, Seasonality, and Residual Components.

Review one or more of the following resources and tell us what you learned about TSA!

*  [Learn about Time Series patterns here](https://otexts.com/fpp2/tspatterns.html)
* [Learn about Time Plots here](https://otexts.com/fpp2/time-plots.html)
*[Learn how to decompose Time Series Data into Trend and Seasonality](https://machinelearningmastery.com/decompose-time-series-data-trend-seasonality/)

**TO DO:** Write 3-5 sentences about TSA.
* Time Series Analysis (TSA) focuses on analyzing data points collected or recorded at specific time intervals to uncover trends, patterns, and insights. It helps identify key components such as trends (long-term direction in the data), seasonality (regular patterns repeating over a set time period), and residuals (random noise or variability that cannot be explained by trends or seasonality). Decomposing time series data into these components allows for better understanding and modeling of the data, enabling more accurate predictions and insights. Time plots are essential tools in TSA as they visually represent how data changes over time, making it easier to detect trends and seasonal patterns.

**Step 2:** Let's begin by creating a chart that displays the average number of crashes per hour of the day. This will help us understand whether additional factors are contributing to crashes - i.e. rush hour, school dismissal time, night fall, etc.
"""

import matplotlib. pyplot as plt
import seaborn as sns
import pandas as pd

# Load the dataset
file_path = "/content/Motor_Vehicle_Collisions_-_Crashes_20250109.csv"
data = pd.read_csv(file_path)

# Convert 'CRASH DATE' and 'CRASH TIME' to datetime
data ['CRASH DATE'] = pd.to_datetime(data['CRASH DATE'])
data ['CRASH TIME'] = pd.to_datetime(data['CRASH TIME'], format='%H:%M' )

# Time of Day Analysis
data['Hour of Day' ] = data ['CRASH TIME' ].dt.hour

# Group by 'Hour of Day' and calculate the average number of crashes per hour
average_crashes_per_hour = data.groupby('Hour of Day' ) . size() / data['Hour of Day'].nunique()

# Plot the average number of crashes
plt.figure(figsize=(12, 6))
sns.barplot(x=average_crashes_per_hour.index, y=average_crashes_per_hour.values)
plt. title('Average Number of crashes per Hour of Day')
plt.xlabel('Hour of Day' )
plt.ylabel('Average Number of crashes')
plt.xticks(range(0, 24))
plt. show()

"""**TO DO:** Which time of the day sees the most crashes? Why do you think so?

The time of day with the most crashes, based on the chart, appears to be around 4:00 PM to 5:00 PM, with a peak in the average number of crashes.

This is likely due to the evening rush hour, as many people are commuting home from work during this time. Increased traffic volume, driver fatigue after a long day, and sometimes adverse weather conditions (depending on the season) could all contribute to the higher frequency of crashes during this period

**Step 3:**
Plot a graph to determine how COVID-19 impacted the number of crashes per month, if at all.
"""

# Convert 'CRASH DATE' to datetime format
data['CRASH DATE'] = pd.to_datetime(data['CRASH DATE'])

# Group by month and year to get the number of crashes per month
monthly_crashes = data.groupby(data['CRASH DATE'].dt.to_period("M")).size()

# Plotting the trend over time
plt.figure(figsize=(15, 7))
monthly_crashes.plot()
plt.title('Number of Crashes per Month', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Number of Crashes', fontsize=14)
plt.tight_layout()
plt.show()

"""**TO DO:** What does your graph tell you about the impact of COVID-19 on the number of crashes per month? Why do you think this occurred?

*The graph shows a big drop in crashes starting in early 2020, which matches the start of the COVID-19 pandemic. This happened because:

Fewer cars on the road: Lockdowns and work-from-home meant less driving.

Less travel: People avoided unnecessary trips due to restrictions.

Curfews and rules: Government policies limited when and how people could travel.
Fewer cars and less movement meant fewer chances for crashes.

**Step 4**: Apply time series decomposition to review trends, seasonality, and residuals. New to time series analysis? Review the [Time Series Flashcard video series](https://youtube.com/playlist?list=PLNs9ZO9jGtUAqd0CNKySksPJJaOqYPMvk&feature=shared) here to learn about trends, components, and further analysis!
"""

import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
# Count the number of crashes per day, group by CRASH DATE
daily_crashes = data.groupby('CRASH DATE').size()
# Set plot style
sns.set(style="darkgrid")
# Plot the daily crashes time series
plt.figure(figsize=(15, 6))
plt.plot(daily_crashes.index.astype(str), daily_crashes.values, label='Daily crashes')
plt.title('Daily Motor Vehicle Collisions in NYC')
plt.xlabel('Day')
plt.ylabel('Crashes')
plt.legend()
plt. show()

# Decompose the time series
decomposition = seasonal_decompose(daily_crashes, model='additive', period=365)

# Plot the decomposed components
fig, (ax1, ax2, ax3)=plt.subplots(3,1,figsize=(15,12))
decomposition.trend.plot(ax=ax1)
ax1.set_title('Trend')
decomposition.seasonal.plot(ax=ax2)
ax2.set_title('Seasonality')
decomposition.resid.plot(ax=ax3)
ax3.set_title('Residuals')
plt.tight_layout()
plt.show()

"""The visualizations above provide valuable insights into the time series of daily motor vehicle collisions in New York City:

1. Time Series Plot: This shows the number of daily crashes over time. You might observe long-term trends, seasonal patterns, or significant outliers.

2. Decomposed Components:
  
    2.1 Trend: This graph shows the long-term trend in the data, which can indicate whether crashes are increasing, decreasing, or stable over time.

    2.2 Seasonality: This reveals any regular patterns that repeat over a specific period, such as yearly. It helps identify times of the year with higher or lower crash frequencies.

    2.3 Residuals: These are the irregular components that cannot be attributed to the trend or seasonality. They might include random or unpredictable fluctuations.

**TO DO:** Based on your *trend graph*, are we seeing an increase or a decrease in crashes between 2014 and 2022?

*Based on the trend graph:
From 2014 to around 2018, there is an increase in crashes.

From 2018 to 2022, there is a sharp decrease in crashes, with the trend flattening out somewhat post-2020.

Overall, between 2014 and 2022, the data shows a net decrease in crashes.


**TO DO:** Based on your *residual graph*, in what year(s) was there a significant unpredicted fluctuation? Why do you think so?

*  Based on the residual graph:

Significant unpredicted fluctuations occurred in 2014 and 2020:

2014: There are several sharp peaks, including a spike well above 600, indicating a large positive deviation from the predicted trend.
2020: There is a noticeable dip around this year, showing a negative deviation.
Reason for these fluctuations:

For 2014, this could be due to an extraordinary event, reporting inconsistencies, or a temporary rise in crash numbers.
For 2020, the fluctuation might correlate with global events like the COVID-19 pandemic, which drastically impacted traffic patterns and accident rates.
These years stand out due to the magnitude and abrupt nature of the deviations in the residuals.

---

##<font color='crimson'>**Milestone #4 - Geospatial Analysis**</font>
GOAL: The main goal of this milestone is to explore geospatial aspects of the dataset and get comfortable with regional analysis and geospatial visualizations.

**Step 1:** Before beginning this Milestone, we highly recommend that you review the [NSDC Geospatial Analysis Flashcard Video series](https://www.youtube.com/playlist?list=PLNs9ZO9jGtUAX_2g1-OJp8VkmVum6DqqP) if you are new to Geospatial Analysis!

Let's build a bar chart to compare and analyze the number of crashes across the five boroughs: Brooklyn (also known as Kings County), Queens, Manhattan, Bronx, and Staten Island.
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

file_path = "/content/Motor_Vehicle_Collisions_-_Crashes_20250109.csv"
data = pd.read_csv(file_path)

#TODO: Plot a bar chart to compare the number of crashes that occurred in each of the five boroughs.
# Set style
sns.set_style("whitegrid")

# Plotting the distribution of crashes by borough
plt.figure(figsize=(12, 7))
# Find the count of unique values of BOROUGHS. Hint: Use value_count function.
borough_count = data['BOROUGH'].value_counts()
sns.barplot(x=borough_count.index, y=borough_count.values, palette="viridis")
plt.title('Distribution of Crashes by Borough', fontsize=16)
plt.xlabel('Borough', fontsize=14)
plt.ylabel('Number of Crashes', fontsize=14)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**TO DO:** Which borough has the highest number of crashes? Which borough has the lowest?

> * Highest: Brooklyn
> * Lowest: State Island


**TO DO:** Are there any reasons that you think a certain borough has a higher or lower number of crashes? What are some factors that may be causing this?

* Based on the chart showing the distribution of crashes by borough, Brooklyn appears to have the highest number of crashes, while Staten Island has the lowest. There are several factors that could explain these differences:

Why Brooklyn might have more crashes:
Higher Population Density: Brooklyn is one of the most populous boroughs, leading to more vehicles and pedestrians, increasing the likelihood of crashes.
Traffic Volume: Major roadways and intersections in Brooklyn experience heavy traffic, which raises the chance of collisions.
Urban Layout: Narrow streets, complex intersections, and mixed-use zones (residential and commercial) might contribute to more frequent accidents.
Economic Activity: Brooklyn has vibrant neighborhoods and business hubs, leading to increased transportation and delivery services, which may elevate crash risks.
Why Staten Island might have fewer crashes:
Lower Population Density: Staten Island is less densely populated than other boroughs, resulting in fewer vehicles on the road.
Suburban Layout: With more open spaces and fewer congested intersections, the risk of crashes is reduced.
Traffic Patterns: Staten Island has fewer major highways and commercial centers compared to boroughs like Manhattan or Brooklyn, reducing traffic volume.
Transit Use: Staten Island residents may rely more on ferries or other public transit options, leading to less road traffic.

**Step 2:** Heatmaps are graphical representations that use color coding to represent different values and variables. Let's leverage a heatmap to determine the most dangerous intersections in the dataset. (**Note: the below cell may take a few minutes to run**)
"""

#TODO: Create a heatmap leveraging the latitude and longitude variables to determine where the most crashes are occurring
import folium
from folium.plugins import HeatMap

# Drop rows with missing latitude and longitude values
data_geo = data.dropna(subset=['LATITUDE', 'LONGITUDE'])

# Create a base map
m = folium.Map(location=[40.730610, -73.935242], zoom_start=10) # Centered around NYC

# Create a heatmap
heat_data = [[row['LATITUDE'], row['LONGITUDE']] for index, row in data_geo.iterrows()]
HeatMap(heat_data, radius=8, max_zoom=13).add_to(m)

m.save("Heatmap.html")

"""**TO DO:** On the left side of your screen, you will see an icon that represents a folder or a file. Click on that icon to find the file titled "Heatmap.html". Click on the three dots next to your file and download your heatmap! Open the file once downloaded to see your creation.

When looking at your heatmap, where do you see a concentration of crashes?

* Looking at the heatmap provided, there appears to be a high concentration of crashes around central Manhattan in New York City. The intensity of the heatmap shows a bright yellow area, which typically represents the highest density of events in a heatmap visualization.

**Step 3:** Next, we will begin "Severity Mapping." We'll plot crashes on the map and code them based on severity, distinguishing between crashes that resulted in injuries and those that led to fatalities. This will give us a visual representation of where severe crashes tend to occur. </br>

You may initially want to code these incidents by using different colors, but it's important to think about your map and how accessible it is. Will a color-coded map be easy to read for everyone? Let's make a map that's inclusive for people with color blindness by also creating differently-shaped markers (squares, circles, and triangles) for crashes, injuries, and fatalities.
"""

#TODO: Continue building your heatmap
# Sample a subset of the data for visualization
sample_data_severity = data_geo.sample(n=1000, random_state=42)

# Create a base map
m_severity = folium.Map(location=[40.730610, -73.935242], zoom_start=10)

# Add crashes to the map with color coding and shape coding based on severity
for index, row in sample_data_severity.iterrows():
    if row['NUMBER OF PERSONS KILLED'] > 0:
        color = "RED"  # Fatalities

        folium.features.RegularPolygonMarker(
          location=[row['LATITUDE'], row['LONGITUDE']],
          number_of_sides=3,
          radius=5,
          gradient = False,
          color=color,
          fill=True,
          fill_color=color
        ).add_to(m_severity)


    elif row['NUMBER OF PERSONS INJURED'] > 0:
        color = "PURPLE"  # Injuries
        folium.CircleMarker(
          location=[row['LATITUDE'], row['LONGITUDE']],
          radius=5,
          color=color,
          fill=True,
          fill_color=color
       ).add_to(m_severity)
    else:
        color = "GRAY"  # No injuries or fatalities
        folium.features.RegularPolygonMarker(
          location=[row['LATITUDE'], row['LONGITUDE']],
          number_of_sides=4,
          radius=5,
          gradient = False,
          color=color,
          fill=True,
          fill_color=color
        ).add_to(m_severity)


m_severity.save("severity.html")

"""**TO DO:** On the left side of your screen, you will see an icon that represents a folder or a file. Follow the same steps as above to download the "Severity.html" file.

**TO DO:** Which intersection(s) seem to be the most dangerous?

> *  Â· Dekalb in DT Brookyln, intersections merging on to WB Bridge, roads going into LaGuardia and JFK

---
---

##<font color='crimson'>  **Milestone #5 - Self-Guided Research Question**</font>
GOAL: In this Milestone, you will be prompted to take what youâ€™ve learned throughout this project, build your own research question, and create a visualization(s) or model(s) to support your research goals.

You may create your visualization(s) in this Colab Notebook, or in Excel, Tableau, PowerBI, etc. Choose whichever medium you are most comfortable with! Be creative!

For participants who are comfortable with advanced data science techniques, we welcome you to leverage additional datasets, if desired. We highly recommend using pre-cleaned datasets from open data sources, like Kaggle.com.

If you have any questions or get stuck, please email nsdc@nebigdatahub.org with your queries. We're here to help!

**Step 1:** Review the dataset(s) that you will be using. As you explore, [consider the research question you want to answer](https://libraries.indiana.edu/sites/default/files/Develop_a_Research_Question.pdf)! Additionally, think about [who you are telling your data's story to](https://hbr.org/2013/04/how-to-tell-a-story-with-data). Your final audience may contain a group of transportation professionals, data scientists, peers, and the general public. Think about how would you frame your analysis differently for each of these groups.

**TO DO:** List one or more research questions here that you are considering.
*  How can data science techniques be used to optimize transportation systems, reduce congestion, and improve the efficiency of urban mobility?

**Step 2:** Now, think about what type of analysis you'd like to complete. Are you interested in looking at time series forecasting? Do you have additional maps in mind that you'd like to create? Is there a certain zip code or region you'd like to dive deeper into?

If you happen to be stuck, here are some examples that you can use or can guide you in choosing your research question!

**Examples:**
- How many crashes, injuries, and/or fatalies occurred in a zip code of interest?
- Which zip code sees the highest amount of crashes and what recommendations can you offer to help that community? Is it an underserved community?
- Do more crashes occur in underrepresented communities? Support your conclusion.
- Which day of the week sees the most crashes, injuries, and/or fatalities? (Hint: use the same method we used when we were analyzing the average number of crashes at different times of the day!)
- Does the geometric features of an intersection (90 degree intersection vs skewed intersection) affect the number of crashes that occur?

Be creative and think outside the box!

**Step 3:** Now that you've decided on your transportation research question, [explore the various types of visualizations you can create to support your research](https://datavizcatalogue.com/). You may create visualizations in this Google Colab notebook, Excel, R, SQL, PowerBI, Tableau, etc. Choose a program you are comfortable with!

You may also choose to build a model or leverage a different data science technique based on your experience level.

**Step 4:** Consider the **accessibility** of the graphs, charts, maps, or models you are interested in building. Use the tools below to learn more!
* How does your visualization appear to people [who may not be able to distinguish between muted colors or see your chart at all?](https://chartability.fizz.studio/)
*[Color Contrast Checker](https://policyviz.com/2022/11/01/color-contrast-checker-in-excel/)
*[SAS Graphics Accelerator](https://support.sas.com/software/products/graphics-accelerator/index.html)
*[TwoTone Data Sonification Tool](https://twotone.io/about/)
*[Making Visual Studio Accessible](https://code.visualstudio.com/docs/editor/accessibility)

To make visualizations more inclusive for people with color blindness, you can choose a color palette that is colorblind-friendly. `Seaborn`, a Python visualization library, provides several palettes that are designed to be perceptible by those with color vision deficiencies. Seaborn's `cubehelix` palette is a good choice, as it was designed specifically with color blindness in mind.

**Step 5:** Begin your research! Give yourself plenty of time to build your visualization or model. If you have any questions along the way, please email nsdc@nebigdatahub.org or write a message in the #[tdsp-community Slack Channel](https://join.slack.com/t/nsdcorps/shared_invite/zt-1h64t1e2p-La0AgU_HhymWUEGFQEcb3w).

**TO DO:** List the research question(s) you've chosen and why! Maybe you chose this question because it can help a community of interest or because it is similar to research you've completed in a class setting. Share your thoughts below.

*How can data science techniques be used to optimize transportation systems, reduce congestion, and improve the efficiency of urban mobility?", is specific and actionable. It effectively narrows down the broad topic of transportation data science to focus on the practical application of data science methods for optimization and efficiency.

This question is clear, concise, and sets the stage for both exploratory and applied research. It also aligns well with current trends in data-driven transportation systems and provides room to explore innovative solutions like predictive analytics, machine learning, and IoT in transportation.

**TO DO:** Build a visualization, model, or use other statistical methods to gain insights into your data and to support your research question.
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Convert 'CRASH DATE' and 'CRASH TIME' to datetime
data['CRASH DATE'] = pd.to_datetime(data['CRASH DATE'])

# Day of the Week Analysis
data['Day of Week'] = data['CRASH DATE'].dt.day_name()
day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Group by 'Day of Week' and calculate the average number of crashes per day
average_crashes_per_weekday = data.groupby('Day of Week').size() /data['Day of Week'].nunique()

# Plot the average number of crashes
plt.figure(figsize=(10, 6))
sns.barplot(x=average_crashes_per_weekday.index, y=average_crashes_per_weekday.values, order=day_order)
plt.title('Crashes During Weekdays')
plt.xlabel('Day of Week')
plt.ylabel('Average Number of Crashes')
plt.xticks(rotation=45)
plt.show()

"""##<font color='crimson'>**Milestone #6 - Virtual Poster Board Creation: Data Storytelling**</font>

GOAL: The main goal of this milestone is to create a one page, virtual poster board to portray your research findings and recommendations! Your poster may be shared with the Department of Transportation and Federal Highway Authority.

Within your poster, summarize your research question, your reasoning for selecting your data visualization or model choices, and key insights from your data analysis. You may also wish to include your outstanding research questions that could not be answered by the dataset and why.

**Be sure to answer the following on your virtual poster board:** Based on your research insights, what recommendations would you share with the Department of Transportation and Federal Highway Authority to make roads safer for vulnerable road users? Why?

**Additionally, be sure to cite all relevant sources that you referred to throughout this project on your poster board (MLA or APA citation preferred). List acknowlegdments if you received any support from mentors, professors, professionals, etc. throughout your journey.**

Please use the following resources to get started!


*   [Virtual Poster Board Template](https://nebigdatahub.org/wp-content/uploads/2024/01/Copy-of-dsi-poster.ppt-48-Ã—-36-in.pdf) - Your one-page, virtual poster may be created in PowerPoint, Google Slides, Canva, etc. Choose what you are most comfortable with!
* [ Data Storytelling: How to Effectively Tell a Story with Data](https://online.hbs.edu/blog/post/data-storytelling)

* [  Consider how your visualization(s) might appear to people with varying abilities ](https://chartability.fizz.studio/)
*  [Understand your audience for an optimal presentation](https://hbr.org/2013/04/how-to-tell-a-story-with-data)


Once completed, please use the [following TDSP Submission Form](https://docs.google.com/forms/d/e/1FAIpQLSeX1OSHj58EQs4ypFEPB_SH3OpWZeo67yU0WWOPVSqYtDrpWg/viewform) to share your Google Colab Notebook and your one-page, virtual project poster with the NSDC HQ Team.

---
---

## ðŸš—<font color='crimson'> **Thank you for completing the project!**</font> ðŸš—

We are one step closer to making roads safer for all. [Please submit all materials to the NSDC HQ team](https://docs.google.com/forms/d/e/1FAIpQLSeX1OSHj58EQs4ypFEPB_SH3OpWZeo67yU0WWOPVSqYtDrpWg/viewform) in order to receive a certificate of completion. Do reach out to us if you have any questions or concerns. We are here to help you learn and grow.
"""